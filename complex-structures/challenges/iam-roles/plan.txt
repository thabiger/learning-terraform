
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_iam_role.test_role["dev-us-east-1"] will be created
  + resource "aws_iam_role" "test_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::123456789012:user/alice"
                        }
                      + Sid       = "AllowSpecificUserToAssumeRole"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "dev-us-east-1"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)
    }

  # aws_iam_role.test_role["dev-us-west-2"] will be created
  + resource "aws_iam_role" "test_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::123456789012:user/alice"
                        }
                      + Sid       = "AllowSpecificUserToAssumeRole"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "dev-us-west-2"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)
    }

  # aws_iam_role.test_role["prod-us-east-1"] will be created
  + resource "aws_iam_role" "test_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::123456789012:user/alice"
                        }
                      + Sid       = "AllowSpecificUserToAssumeRole"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "prod-us-east-1"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)
    }

  # aws_iam_role_policy_attachment.test-attach["396d8123bec0a34ae8a51a222e28b8c4"] will be created
  + resource "aws_iam_role_policy_attachment" "test-attach" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AdministratorAccess"
      + role       = "prod-us-east-1"
    }

  # aws_iam_role_policy_attachment.test-attach["4ac948ed323a8dfa590bb7fd7de166ec"] will be created
  + resource "aws_iam_role_policy_attachment" "test-attach" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/ReadOnlyAccess"
      + role       = "dev-us-east-1"
    }

  # aws_iam_role_policy_attachment.test-attach["d88e13ad76aba3006c620106f4cb88e1"] will be created
  + resource "aws_iam_role_policy_attachment" "test-attach" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/ReadOnlyAccess"
      + role       = "dev-us-west-2"
    }

  # aws_iam_role_policy_attachment.test-attach["dd67d883bf76fa5ba168f7822425e4b8"] will be created
  + resource "aws_iam_role_policy_attachment" "test-attach" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess"
      + role       = "dev-us-east-1"
    }

Plan: 7 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + iam_policies = {
      + "396d8123bec0a34ae8a51a222e28b8c4" = {
          + policy = "arn:aws:iam::aws:policy/AdministratorAccess"
          + role   = "prod-us-east-1"
        }
      + "4ac948ed323a8dfa590bb7fd7de166ec" = {
          + policy = "arn:aws:iam::aws:policy/ReadOnlyAccess"
          + role   = "dev-us-east-1"
        }
      + d88e13ad76aba3006c620106f4cb88e1   = {
          + policy = "arn:aws:iam::aws:policy/ReadOnlyAccess"
          + role   = "dev-us-west-2"
        }
      + dd67d883bf76fa5ba168f7822425e4b8   = {
          + policy = "arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess"
          + role   = "dev-us-east-1"
        }
    }
  + iam_roles    = {
      + dev-us-east-1  = [
          + "arn:aws:iam::aws:policy/ReadOnlyAccess",
          + "arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess",
        ]
      + dev-us-west-2  = [
          + "arn:aws:iam::aws:policy/ReadOnlyAccess",
        ]
      + prod-us-east-1 = [
          + "arn:aws:iam::aws:policy/AdministratorAccess",
        ]
    }

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
